{
  "name": "git-reviews",
  "nodes": [
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.all();\n  \n  if (!inputData || inputData.length === 0) {\n    return [{\n      json: {\n        user_message: \"No file changes found in the pull requests.\",\n        error: \"Empty input data\"\n      }\n    }];\n  }\n\n  const files = inputData.map(item => item.json).filter(file => file && typeof file === 'object');\n  \n  if (files.length === 0) {\n    return [{\n      json: {\n        user_message: \"No valid file data found in the pull requests.\",\n        error: \"No valid files\"\n      }\n    }];\n  }\n\n  let diffs = '';\n  let currentPR = null;\n  let prCount = 0;\n\n  // Group files by PR\n  const prGroups = {};\n  files.forEach(file => {\n    const prKey = `${file.repository}#${file.prNumber}`;\n    if (!prGroups[prKey]) {\n      prGroups[prKey] = {\n        repository: file.repository,\n        prNumber: file.prNumber,\n        prTitle: file.prTitle,\n        prUrl: file.prUrl,\n        files: []\n      };\n    }\n    prGroups[prKey].files.push(file);\n  });\n\n  // Process each PR group\n  Object.keys(prGroups).forEach(prKey => {\n    const pr = prGroups[prKey];\n    prCount++;\n    \n    diffs += `\\n## PR ${prCount}: ${pr.repository} #${pr.prNumber}\\n`;\n    diffs += `**Title:** ${pr.prTitle}\\n`;\n    diffs += `**URL:** ${pr.prUrl}\\n\\n`;\n\n    for (const file of pr.files) {\n      if (!file.filename) continue;\n      \n      diffs += `### File: ${file.filename}\\n`;\n      diffs += `**Status:** ${file.status || 'unknown'} | **Changes:** +${file.additions || 0}/-${file.deletions || 0}\\n\\n`;\n\n      if (file.patch) {\n        // Replace triple backticks to avoid markdown conflicts\n        const safePatch = file.patch.replace(/```/g, \"''\");\n\n        diffs += \"```diff\\n\";\n        diffs += safePatch;\n        diffs += \"\\n```\\n\";\n      } else {\n        diffs += \"_No patch available (likely binary file or too large)._\";\n      }\n\n      diffs += \"\\n---\\n\\n\";\n    }\n\n    diffs += \"\\n===========================\\n\\n\";\n  });\n\n  if (!diffs.trim()) {\n    return [{\n      json: {\n        user_message: \"No file diffs found to review.\",\n        error: \"No diffs available\"\n      }\n    }];\n  }\n\n  const userMessage = `Please review the following code changes across ${prCount} pull request(s):\\n\\n${diffs}`;\n\n  return [\n    {\n      json: {\n        user_message: userMessage.trim(),\n        totalPRs: prCount,\n        totalFiles: files.length\n      }\n    }\n  ];\n} catch (error) {\n  return [{\n    json: {\n      user_message: \"Error processing pull request files: \" + error.message,\n      error: error.message\n    }\n  }];\n}"
      },
      "id": "9d099550-112b-4500-b6cd-a1255855e848",
      "name": "Create target Prompt from PR Diffs",
      "type": "n8n-nodes-base.code",
      "position": [
        -16,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a code reviewer. \n\nSTEPS:\n1. Call 'getInputData' tool to get the actual file changes to review\n2. Call 'codeBestPractices' tool to get review guidelines\n3. Review each file in the data from step 1\n\nLook for lines starting with \"### File:\" in the input data, extract exact filenames, and review the diff content.\n\nFormat:\n### File: [exact filename from input]\n[review] OR LGTM\n\nSummary: Reviewed X files.",
        "options": {}
      },
      "id": "40b3f0b8-543c-47ad-8fb3-d4454a3be89d",
      "name": "Code Review Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        224,
        128
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "jsCode": "// Get first input item\nconst data = $input.first();\n\nif (!data || !data.json || !data.json.output) {\n  throw new Error('No output found in input item.');\n}\n\n// Only replace literal backslash + n that are followed by a space or end-of-string\n// This prevents messing with LaTeX commands\nconst cleanTex = data.json.output.replace(/\\\\n(?=\\s|$)/g, \"\\n\");\n\n// Return both viewable JSON and downloadable binary\nreturn {\n  json: {\n    reviewContent: cleanTex,\n    fileName: \"review.txt\",\n    mimeType: \"text/plain\",\n    size: cleanTex.length\n  },\n  binary: {\n    data: {\n      data: Buffer.from(cleanTex, \"utf8\").toString(\"base64\"),\n      mimeType: \"text/plain\",\n      fileName: \"review.txt\"\n    }\n  }\n};\n"
      },
      "id": "08146a84-8d92-4393-94c1-96ae897382bd",
      "name": "Export File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        240
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "2d415918-1422-436b-b5de-9da7b4d1f446",
      "name": "OpenAI Brain",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        192,
        352
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "events": [
          "init",
          "activate"
        ]
      },
      "type": "n8n-nodes-base.n8nTrigger",
      "typeVersion": 1,
      "position": [
        -1056,
        240
      ],
      "id": "a1144876-5735-42f8-b2c7-6508135f3663",
      "name": "n8n Startup Trigger"
    },
    {
      "parameters": {
        "content": "Triggers automatic code review for workflows when n8n starts up or workflow is manually activated.",
        "height": 112,
        "width": 168,
        "color": 3
      },
      "id": "d3cc6098-75f9-4579-81ce-69a807cdf160",
      "name": "Startup Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1056,
        96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Fetches open pull requests from Tardigrade repository using GitHub API with authentication.",
        "height": 112,
        "width": 184,
        "color": 5
      },
      "id": "39047b1e-34b3-483a-be93-43cb06ffda08",
      "name": "Tardigrade PR Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -816,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Fetches open pull requests from Tardigrade-Data repository using GitHub API.",
        "height": 112,
        "width": 182,
        "color": 5
      },
      "id": "0393e868-0030-42a1-b639-cade9a5eecca",
      "name": "Data PR Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -816,
        304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Checks if any pull requests exist in Tardigrade repository before proceeding with processing.",
        "height": 112,
        "width": 216,
        "color": 4
      },
      "id": "f57cdd7e-33fa-4d5b-9549-b1f24235a1e1",
      "name": "Check Tardigrade Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -624,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Checks if any pull requests exist in Data repository before proceeding with processing.",
        "height": 112,
        "width": 216,
        "color": 4
      },
      "id": "75cb3934-e2e5-4a9b-a93d-6f93e425989b",
      "name": "Check Data Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -624,
        304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Processes multiple Tardigrade PRs and creates metadata for file fetching including PR numbers & URLs.",
        "height": 112,
        "width": 168,
        "color": 6
      },
      "id": "7a843b88-e12f-4f44-9710-3ee7014a1b89",
      "name": "Process Tardigrade Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -400,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Processes multiple Data PRs and creates metadata for file fetching including PR numbers and URLs.",
        "height": 112,
        "width": 168,
        "color": 6
      },
      "id": "6e19e9fb-35a3-42c8-afe3-4e607c27a3cc",
      "name": "Process Data Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -400,
        304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Fetches detailed file changes and diffs from each of the pull request using GitHub Files API.",
        "height": 112,
        "width": 166,
        "color": 2
      },
      "id": "f346706e-542f-4ef0-80eb-ce727005f737",
      "name": "Fetch Files Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -192,
        96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Creates formatted prompt with PR diffs, groups files by PR, preparing data for AI code review.",
        "height": 112,
        "width": 166
      },
      "id": "b84c0119-772d-4128-802f-44547a646afe",
      "name": "Create Prompt Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Code Review Open AI agent that performs comprehensive code review using GPT-4, analyzes differences, and provides feedback.",
        "height": 112,
        "width": 232
      },
      "id": "2761775e-c8f7-4044-8e57-02749dc97b26",
      "name": "AI Review Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        224,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Exports the AI code review results as a text file for external viewing and record keeping.",
        "height": 112,
        "width": 168
      },
      "id": "3caa1a69-8333-4454-90ec-b3d0da9bfb64",
      "name": "Export Review Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        544,
        96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "codeBestPractices",
        "description": "Provides comprehensive code best practices and guidelines for code review. Use this tool to get coding standards, security practices, performance guidelines, and language-specific recommendations.",
        "jsCode": "// Code Best Practices Tool\nconst codeBestPractices = {\n  general: [\n    \"Follow consistent naming conventions throughout the codebase\",\n    \"Write clear, self-documenting code with meaningful variable names\",\n    \"Keep functions small and focused on a single responsibility\",\n    \"Use proper error handling and logging\",\n    \"Write unit tests for critical functionality\",\n    \"Follow DRY (Don't Repeat Yourself) principle\",\n    \"Use version control effectively with clear commit messages\",\n    \"Document complex business logic and algorithms\"\n  ],\n  security: [\n    \"Validate and sanitize all user inputs\",\n    \"Use parameterized queries to prevent SQL injection\",\n    \"Implement proper authentication and authorization\",\n    \"Store sensitive data securely (encrypted)\",\n    \"Keep dependencies up to date\",\n    \"Use HTTPS for all data transmission\",\n    \"Implement proper session management\",\n    \"Follow principle of least privilege\"\n  ],\n  performance: [\n    \"Optimize database queries and use indexes appropriately\",\n    \"Implement caching strategies where beneficial\",\n    \"Use lazy loading for large datasets\",\n    \"Minimize network requests and payload sizes\",\n    \"Profile and monitor application performance\",\n    \"Use appropriate data structures for the task\",\n    \"Avoid premature optimization\",\n    \"Implement proper memory management\"\n  ],\n  csharp: [\n    \"Use nullable reference types appropriately\",\n    \"Follow Microsoft C# coding conventions\",\n    \"Use async/await for I/O operations\",\n    \"Implement IDisposable for resource cleanup\",\n    \"Use LINQ appropriately for data operations\",\n    \"Follow SOLID principles in class design\",\n    \"Use dependency injection for loose coupling\",\n    \"Handle exceptions at appropriate levels\"\n  ]\n};\n\n// Get the category requested or return all if no specific category\nconst category = $input.first()?.json?.category || 'all';\n\nlet output = 'CODE BEST PRACTICES FOR REVIEW:\\n\\n';\n\nif (category === 'all') {\n  for (const [cat, practices] of Object.entries(codeBestPractices)) {\n    output += `## ${cat.toUpperCase()} PRACTICES:\\n`;\n    practices.forEach((practice, index) => {\n      output += `${index + 1}. ${practice}\\n`;\n    });\n    output += '\\n';\n  }\n} else if (codeBestPractices[category]) {\n  output += `## ${category.toUpperCase()} PRACTICES:\\n`;\n  codeBestPractices[category].forEach((practice, index) => {\n    output += `${index + 1}. ${practice}\\n`;\n  });\n} else {\n  output = `Error: Category '${category}' not found. Available categories: ${Object.keys(codeBestPractices).join(', ')}`;\n}\n\n// LangChain tool must return a string\nreturn output;"
      },
      "id": "7eeef25e-8cde-4be3-9d52-ea017a43a7ec",
      "name": "Get Best Practices",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "position": [
        432,
        352
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "name": "getInputData",
        "description": "Gets the actual file changes to review from the workflow input",
        "jsCode": "// Get the input data from the workflow\nconst inputData = $input.all();\n\n// Look for user_message in the input data\nfor (const item of inputData) {\n  if (item.json && item.json.user_message) {\n    return item.json.user_message;\n  }\n}\n\n// Fallback - return raw input for debugging\nreturn 'Input data: ' + JSON.stringify(inputData, null, 2);"
      },
      "id": "12bc7dcd-e7e9-4f07-8bee-0122ca278518",
      "name": "Get Input",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "position": [
        304,
        352
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/LSAS-Tec/Tardigrade/pulls?q=is%3Aopen+is%3Apr+draft%3Afalse",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "ec387f7a-905b-4e4d-a450-108b759488ba",
      "name": "Get Tardigrade",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -816,
        144
      ],
      "typeVersion": 4.2,
      "credentials": {
        "githubOAuth2Api": {
          "id": "Twucb529Xms8saey",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/LSAS-Tec/Tardigrade-Data/pulls?q=is%3Aopen+is%3Apr+draft%3Afalse",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "59c1eb99-ae68-4976-bf85-c089441c08d3",
      "name": "Get Data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -816,
        448
      ],
      "typeVersion": 4.2,
      "credentials": {
        "githubOAuth2Api": {
          "id": "Twucb529Xms8saey",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ Array.isArray($json) ? $json.length > 0 : $json.number }}",
              "rightValue": "",
              "operator": {
                "operation": "exists",
                "type": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c13dc0a6-b5c3-47ac-87a0-1887c4961fff",
      "name": "Check Tardigrade",
      "type": "n8n-nodes-base.if",
      "position": [
        -624,
        144
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ Array.isArray($json) ? $json.length > 0 : $json.number }}",
              "rightValue": "",
              "operator": {
                "operation": "exists",
                "type": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "59b1951e-3aa6-495e-aa70-7333cccbbfc7",
      "name": "Check Data",
      "type": "n8n-nodes-base.if",
      "position": [
        -624,
        448
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Process multiple PRs from Tardigrade repository\nconst inputData = $input.first();\nconsole.log('Processing Tardigrade PRs:', JSON.stringify(inputData.json, null, 2));\n\n// Handle both array and single PR formats\nlet prs = [];\nif (Array.isArray(inputData.json)) {\n  prs = inputData.json;\n} else if (inputData.json && inputData.json.number) {\n  prs = [inputData.json];\n} else {\n  return [{\n    json: {\n      repository: 'LSAS-Tec/Tardigrade',\n      prs: [],\n      message: 'No PRs found to process'\n    }\n  }];\n}\n\nconsole.log(`Found ${prs.length} Tardigrade PRs to process`);\n\n// Create individual items for each PR that will be processed\nconst results = [];\nfor (const pr of prs) {\n  if (pr.number) {\n    results.push({\n      json: {\n        repository: 'LSAS-Tec/Tardigrade',\n        prNumber: pr.number,\n        prTitle: pr.title || 'Untitled PR',\n        prUrl: pr.html_url || '',\n        filesUrl: `https://api.github.com/repos/LSAS-Tec/Tardigrade/pulls/${pr.number}/files`\n      }\n    });\n  }\n}\n\nconsole.log(`Created ${results.length} items for Tardigrade PR processing`);\nreturn results;"
      },
      "id": "1556e397-b5f9-4cb3-b5a2-671828e83cf2",
      "name": "Process Tardigrade PRs",
      "type": "n8n-nodes-base.code",
      "position": [
        -400,
        144
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Process multiple PRs from Tardigrade-Data repository\nconst inputData = $input.first();\nconsole.log('Processing Data PRs:', JSON.stringify(inputData.json, null, 2));\n\n// Handle both array and single PR formats\nlet prs = [];\nif (Array.isArray(inputData.json)) {\n  prs = inputData.json;\n} else if (inputData.json && inputData.json.number) {\n  prs = [inputData.json];\n} else {\n  return [{\n    json: {\n      repository: 'LSAS-Tec/Tardigrade-Data',\n      prs: [],\n      message: 'No PRs found to process'\n    }\n  }];\n}\n\nconsole.log(`Found ${prs.length} Data PRs to process`);\n\n// Create individual items for each PR that will be processed\nconst results = [];\nfor (const pr of prs) {\n  if (pr.number) {\n    results.push({\n      json: {\n        repository: 'LSAS-Tec/Tardigrade-Data',\n        prNumber: pr.number,\n        prTitle: pr.title || 'Untitled PR',\n        prUrl: pr.html_url || '',\n        filesUrl: `https://api.github.com/repos/LSAS-Tec/Tardigrade-Data/pulls/${pr.number}/files`\n      }\n    });\n  }\n}\n\nconsole.log(`Created ${results.length} items for Data PR processing`);\nreturn results;"
      },
      "id": "a63f9d7a-e13e-4cff-a16e-6842c73ed4c4",
      "name": "Process Data PRs",
      "type": "n8n-nodes-base.code",
      "position": [
        -400,
        448
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $json.filesUrl }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "192641cc-8ecf-471d-bd38-9c5c6d022315",
      "name": "Fetch PR Files",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -192,
        240
      ],
      "typeVersion": 4.2,
      "credentials": {
        "githubOAuth2Api": {
          "id": "Twucb529Xms8saey",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "content": "Notification about automated git code PR reviews will be sent to configured email address",
        "height": 112,
        "width": 166
      },
      "id": "a865ce83-e2d8-4001-9307-c69a2382adec",
      "name": "Export File Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        768,
        96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fromEmail": "jomirusergiu@gmail.com",
        "toEmail": "jomirusergiu@gmail.com",
        "subject": "=Git PR Reviews Report",
        "emailFormat": "text",
        "text": "={{ $json.reviewContent }}",
        "options": {
          "appendAttribution": false,
          "allowUnauthorizedCerts": true
        }
      },
      "id": "6017e02c-71f4-4052-9ef8-badb499da137",
      "name": "Send Email Briefing",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        800,
        240
      ],
      "webhookId": "52757a00-9c6f-4c00-b7b2-03bc25c4b28d",
      "credentials": {
        "smtp": {
          "id": "hDZ18LOe4Kax4dpH",
          "name": "SMTP account"
        }
      }
    }
  ],
  "pinData": {
    "n8n Startup Trigger": [
      {
        "json": {
          "parameters": {},
          "name": "Startup Trigger",
          "type": "n8n-nodes-base.startupTrigger",
          "typeVersion": 1,
          "position": [
            240,
            300
          ]
        }
      }
    ]
  },
  "connections": {
    "Create target Prompt from PR Diffs": {
      "main": [
        [
          {
            "node": "Code Review Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Review Agent": {
      "main": [
        [
          {
            "node": "Export File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Brain": {
      "ai_languageModel": [
        [
          {
            "node": "Code Review Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "n8n Startup Trigger": {
      "main": [
        [
          {
            "node": "Get Tardigrade",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Best Practices": {
      "ai_tool": [
        [
          {
            "node": "Code Review Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Input": {
      "ai_tool": [
        [
          {
            "node": "Code Review Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Tardigrade": {
      "main": [
        [
          {
            "node": "Check Tardigrade",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Data": {
      "main": [
        [
          {
            "node": "Check Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Tardigrade": {
      "main": [
        [
          {
            "node": "Process Tardigrade PRs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Data": {
      "main": [
        [
          {
            "node": "Process Data PRs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Tardigrade PRs": {
      "main": [
        [
          {
            "node": "Fetch PR Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data PRs": {
      "main": [
        [
          {
            "node": "Fetch PR Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch PR Files": {
      "main": [
        [
          {
            "node": "Create target Prompt from PR Diffs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Export File": {
      "main": [
        [
          {
            "node": "Send Email Briefing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "callerPolicy": "workflowsFromSameOwner",
    "executionOrder": "v0",
    "timeSavedPerExecution": 60
  },
  "versionId": "252f0595-baa3-4fe9-a8ba-2886225336e9",
  "meta": {
    "templateId": "3804",
    "instanceId": "3fdd671e7fc1859ff2383b05c6eea518207a3d971ca0642cd42531697f273a8c"
  },
  "id": "ryubZDpF5stfDkm1",
  "tags": [
    {
      "createdAt": "2025-09-02T03:10:12.939Z",
      "updatedAt": "2025-09-02T03:10:12.939Z",
      "id": "4sBS6Wi32Qg4K5kY",
      "name": "pr"
    },
    {
      "createdAt": "2025-09-02T03:10:04.097Z",
      "updatedAt": "2025-09-02T03:10:04.097Z",
      "id": "FvtZat83918HQaH3",
      "name": "reviews"
    },
    {
      "createdAt": "2025-08-06T08:16:40.300Z",
      "updatedAt": "2025-08-06T08:16:40.300Z",
      "id": "QqgjtHKCzqHz0ohR",
      "name": "git"
    }
  ]
}