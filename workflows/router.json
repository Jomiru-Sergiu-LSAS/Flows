{
  "name": "router",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a routing agent. Analyze the user request and output ONLY a JSON object with the routing decision.\nMake sure to pass chatInput content in the output json as well\n\nRouting rules:\n- For emails, drafts, spam, trash, reports, weekly report, totals, summaries, windows, pc, restart, reboot, startup, shutdown, news, or newsletters → Director of Operations\n- For git, prs, code review, pull requests, merge requests, updates, repositories, JIRA (create/query), tickets, issues, tasks, bugs, features, stories, create task, create bug, create feature, create story, create ticket, create issue, get tasks, show tasks, list tasks, my tasks, my issues, sprint tasks, sprint issues, backlog tasks, backlog issues, assigned to me, CI/CD, build, deploy, pipeline, general chat/questions → Director of Product\n- For engineering, development, research, scripts, script creation, automation scripts, file operations (read, write, delete) → Director of Engineering\n\nOutput format:\n{\n  \"action\": \"<describe the user request>\",\n  \"agent\": \"<Agent Name>\"\n}\n\nExample outputs:\n{\"action\": \"Clean email spam\", \"agent\": \"Director of Operations\"}\n{\"action\": \"Shutdown computer\", \"agent\": \"Director of Operations\"}\n{\"action\": \"Create a backup script\", \"agent\": \"Director of Engineering\"}\n{\"action\": \"Create a JIRA task for fixing the login bug\", \"agent\": \"Director of Product\"}\n{\"action\": \"Create a bug ticket for the payment system\", \"agent\": \"Director of Product\"}\n{\"action\": \"Get all my JIRA issues\", \"agent\": \"Director of Product\"}\n{\"action\": \"Show all sprint tasks\", \"agent\": \"Director of Product\"}\n{\"action\": \"List all backlog issues\", \"agent\": \"Director of Product\"}"
        }
      },
      "id": "4df16fef-1e47-42a3-9523-fa8378fd52b1",
      "name": "CTO Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -1024,
        -608
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "content": "\n\n## 🧠 **CTO AI Agent Multi-Domain Router**\n\nThis n8n workflow routes every chat through a **CTO Agent** (O3) which analyzes requests and routes through an **Operation Decision** node to three Director-level agents for specialized domains.\n\n### ⚙️ How it works\n1) **Chat Trigger ➜ CTO Agent (O3) ➜ Operation Decision ➜ Decision Switch**  \n   CTO analyzes user requests and outputs JSON routing decisions with memory persistence. Operation Decision node parses JSON and Decision Switch routes to appropriate Director based on agent type.\n\n2) **Three-Domain Director Architecture**\n   - **Director of Operations** *(Operations & System Management)*\n     - **Mail Actions** (spam, drafts, trash cleanup, mail replies)\n     - **News Actions** (newsletters, latest news updates)\n     - **Win Actions** (shutdown, reboot, startup, system operations)\n     - **Report Actions** (weekly/monthly reports, summaries, analytics)\n   \n   - **Director of Product** *(Development Workflows & Project Management)*\n     - **Git Actions** (repos, PRs, code reviews, repository updates) \n     - **JIRA Actions** (create/query tickets, issues, project tracking)\n       * Create: tasks, bugs, features/stories with priority\n       * Query: sprint tasks, backlog tasks, my assigned tasks\n     - **Chat Actions** (general conversations)\n     - **CI/CD Actions** (build, deploy, pipelines)\n   \n   - **Director of Engineering** *(Technical Expertise & Development)*\n     - **7 Expert Engineer Agents** with shared **RW Actions**:\n       - Software Architect, Frontend Developer, Backend Developer\n       - QA Test Engineer, Security Engineer, DevOps Engineer, Research Engineer\n     - **RW Actions** (unified file read, write, delete operations with AI classification)\n     - **Think** tool for coordination and planning\n\n### 🧩 Models & Architecture\n- **CTO Agent:** O3 (Model)\n- **Director of Operations:** O3 (General)\n- **Director of Product:** O3 (Product) \n- **Director of Engineering:** O3 (Engineer)\n- **7 Engineering Experts:** GPT-4.1-mini (Specialist)\n\n\n\n> **Usage:** CTO automatically routes requests through Director-level coordination—ask for emails/system operations, create/query JIRA tasks (sprint/backlog/assigned), manage git/PRs, or technical engineering solutions including file operations. Each Director manages tools and actions for their domain.",
        "height": 964,
        "width": 900,
        "color": 7
      },
      "id": "5837eef8-da67-4859-ab44-07bbfe6b2627",
      "name": "Sticky Note Main",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1328,
        -272
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "description": "Call this tool to handle all git updates, git pulls, git latest, pull requests, merge requests, pr's, mr's, code reviews, etc.\n",
        "workflowId": {
          "__rl": true,
          "value": "E58bptNtshnefZyz",
          "mode": "list",
          "cachedResultName": "git-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -144,
        -336
      ],
      "id": "01bb02f9-b581-450f-b618-2ac87cc96702",
      "name": "Git Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to create JIRA tasks/bugs/features OR query JIRA issues (sprint tasks, backlog tasks, or tasks assigned to me).",
        "workflowId": {
          "__rl": true,
          "value": "uPHpgToaQ0oK47hI",
          "mode": "list",
          "cachedResultUrl": "/workflow/uPHpgToaQ0oK47hI",
          "cachedResultName": "jira-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "operation": "={{ $fromAI('operation', 'Operation type: create, query-sprint, query-backlog, or query-assigned. Use create to create new issues, query-sprint to get all sprint tasks, query-backlog to get all backlog tasks, or query-assigned to get tasks assigned to Sergiu.', 'string') }}",
            "issueType": "={{ $fromAI('issueType', 'For create operation: Task, Bug, or Story. Not needed for query operations.', 'string') }}",
            "summary": "={{ $fromAI('summary', 'For create operation: A concise summary/title. Not needed for query operations.', 'string') }}",
            "description": "={{ $fromAI('description', 'For create operation: Detailed description. Not needed for query operations.', 'string') }}",
            "priority": "={{ $fromAI('priority', 'For create operation: Low, Medium, High, or Critical. Not needed for query operations.', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "operation",
              "displayName": "Operation",
              "required": true,
              "defaultValue": "create",
              "type": "string"
            },
            {
              "id": "issueType",
              "displayName": "Issue Type",
              "required": false,
              "defaultValue": "Task",
              "type": "string"
            },
            {
              "id": "summary",
              "displayName": "Summary",
              "required": false,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "description",
              "displayName": "Description",
              "required": false,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "priority",
              "displayName": "Priority",
              "required": false,
              "defaultValue": "Medium",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -32,
        -336
      ],
      "id": "2c64984a-4f06-498f-b697-23bcb62bb215",
      "name": "JIRA Actions"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        80,
        -336
      ],
      "id": "51b176f6-9b55-481c-880d-403d7a10c73a",
      "name": "Chat Actions"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        192,
        -336
      ],
      "id": "1e91d5ad-9e84-494f-8f9a-06d18cba17c0",
      "name": "CI/CD Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to handle all read, write, delete file operations, including creating scripts and automation files.",
        "workflowId": {
          "__rl": true,
          "value": "vvKOjDSXDqyYbpok",
          "mode": "list",
          "cachedResultUrl": "/workflow/vvKOjDSXDqyYbpok",
          "cachedResultName": "rw-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'The complete file content to write (for write operations), or the file path (for read/delete operations). For scripts, include the FULL script code here.', 'string') }}",
            "fileInstructions": "={{ $fromAI('fileInstructions', 'Specify the operation (read/write/delete), the target file path with extension (e.g., C:\\\\scripts\\\\backup.ps1), and any additional context. For write operations, chatInput should contain the content and fileInstructions should specify the destination path.', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "File Content or Path",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "fileInstructions",
              "displayName": "File Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "name": "RW Actions",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1424,
        592
      ],
      "id": "99b073dc-88f7-413c-a29f-9953ec58e161"
    },
    {
      "parameters": {
        "toolDescription": "You are a Frontend Developer Agent. \nYou implement UI/UX, responsive design, and frontend frameworks.\n\nCall this AI Agent that specializes in user interface development, responsive design, frontend frameworks, and user experience optimization\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"ui\": \"frontend task\" },\n  \"response\": \"Frontend solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "3a4333c1-d7af-4088-8245-b2f537100668",
      "name": "Frontend Developer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        0,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a Backend Developer Agent. \nYou implement APIs, databases, and backend services.\n\nCall this AI Agent that specializes in server-side development, API design, database architecture, and microservices implementation\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"service\": \"backend task\" },\n  \"response\": \"Backend solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "4079946e-b548-4429-927f-cdefcb3392b0",
      "name": "Backend Developer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        256,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a QA Test Engineer Agent. \nYou ensure quality through test design, automation, and validation.\n\nCall this AI Agent that specializes in test automation, quality assurance strategies, test case design, and performance testing\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"test\": \"qa task\" },\n  \"response\": \"QA solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "ce57c0c8-f984-4e01-a350-5d9d2ff53a11",
      "name": "QA Test Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        512,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a Security Engineer Agent. \nYou identify vulnerabilities, enforce best practices, and improve compliance.\n\nCall this AI Agent that specializes in application security, vulnerability assessments, secure coding practices, and compliance frameworks\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"security\": \"security task\" },\n  \"response\": \"Security advice for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "ffdd3ca8-0daa-4e36-9bd4-2f646a807eed",
      "name": "Security Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        768,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a DevOps Engineer Agent specialized in SCRIPT CREATION and automation.\n\nPrimary responsibilities:\n- Creating scripts (batch files, PowerShell, bash scripts, automation scripts)\n- Writing automation code for system tasks\n- CI/CD pipelines, cloud deployments, and infrastructure as code\n\n📁 Default Working Directory: C:\\\\Dev\n- When no file path is specified, create scripts in C:\\\\Dev\n- If user provides a specific path, use that path instead\n- Always use the proper file extension (.ps1, .bat, .sh, .py, etc.)\n\n🔑 CRITICAL: When asked to CREATE, WRITE, or GENERATE scripts or files:\n1. First, generate the COMPLETE script content\n2. Call the \"RW Actions\" tool with two parameters:\n   - chatInput: The FULL script content (all code, multi-line, properly formatted)\n   - fileInstructions: \"write to <file_path>\" (e.g., \"write to C:\\\\Dev\\\\backup.ps1\")\n3. If no path specified, default to C:\\\\Dev\\\\<scriptname>.ext\n\nExample RW Actions call formats:\n- chatInput: \"@echo off\\necho Hello World\\npause\"\n- fileInstructions: \"write to C:\\\\Dev\\\\hello.bat\"\n\nCall this AI Agent for script creation, automation tasks, CI/CD, infrastructure automation, containerization, and deployment strategies.\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"RW Actions\",\n  \"arguments\": { \"chatInput\": \"<full_script_content>\", \"fileInstructions\": \"write to <path>\" },\n  \"response\": \"Script created for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "c2ec81b3-76fe-40fe-9a3b-712415b9c0c9",
      "name": "DevOps Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        1024,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a Software Architect Agent. \nYou design scalable systems, select patterns, and propose high-level solutions.\n\nCall this AI Agent that specializes in system architecture, design patterns, technology stack decisions, and scalability planning\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"system\": \"architecture details\" },\n  \"response\": \"Architecture proposal for Sergiu\"\n}",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "1c49edde-b69b-4339-886a-bb10e2637d1f",
      "name": "Software Architect Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        -256,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "b3b3a458-0cfd-4fe1-a53a-21a5f5d3320c",
      "name": "Think",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        -96,
        64
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "description": "Call this tool to handle, drafts, draft cleanup, spam, spam cleanup, trash, trash cleanup, as well as mail replies or creation of new mail drafts",
        "workflowId": {
          "__rl": true,
          "value": "luB6neTADgM0YTIH",
          "mode": "list",
          "cachedResultUrl": "/workflow/luB6neTADgM0YTIH",
          "cachedResultName": "mail-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'Chat message or email content', 'string') }}",
            "emailInstructions": "={{ $fromAI('emailInstructions', 'Email instructions including recipient, subject context, and any specific requirements', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "Chat Input",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "emailInstructions",
              "displayName": "Email Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        464,
        -336
      ],
      "id": "249bb51e-662f-4801-bc56-b0d8f148e64c",
      "name": "Mail Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to handle news, newsletters, latest news, etc.",
        "workflowId": {
          "__rl": true,
          "value": "9MWvHmSry7VECDzJ",
          "mode": "list",
          "cachedResultName": "news-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'Chat message or email content', 'string') }}",
            "emailInstructions": "={{ $fromAI('emailInstructions', 'Email instructions including recipient, subject context, and any specific requirements', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "Chat Input",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "emailInstructions",
              "displayName": "Email Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        576,
        -336
      ],
      "id": "e6aa997a-01c4-443c-9ad8-310d820fae58",
      "name": "News Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to handle windows, pc, admin stuff, such as startup, shutdown, restart, reboot, halt etc.",
        "workflowId": {
          "__rl": true,
          "value": "9MKVJd2X6cEHduCK",
          "mode": "list",
          "cachedResultName": "win-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'Chat message or email content', 'string') }}",
            "emailInstructions": "={{ $fromAI('emailInstructions', 'Email instructions including recipient, subject context, and any specific requirements', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "Chat Input",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "emailInstructions",
              "displayName": "Email Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        688,
        -336
      ],
      "id": "ed291562-991d-4700-8343-83f55f265f7d",
      "name": "Win Actions"
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "loadPreviousSession": "memory"
        }
      },
      "id": "e4ce8ea5-1e65-4d7c-a6b8-43d36bafae30",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -1328,
        -608
      ],
      "webhookId": "9eab0524-6cd7-4b81-8bd8-4d050a972a08",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3",
          "mode": "list",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "cbc30159-a593-4d95-871d-241db5ee0c05",
      "name": "Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -1024,
        -416
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.action }}",
        "options": {
          "systemMessage": "You are a helpful Director of Operations Assistant. \nMy name is Sergiu.\n\n🔑 Rules:\n- Do not just provide chat feedback. Trigger tools only and provide feedback from tools.\n- Call \"Mail Actions\" tool → For emails, drafts, spam, trash.\n- Call \"News Actions\" tool → For news, newsletter, latest news.\n- Call \"Win Actions\" tool → For windows, pc, restart, reboot, startup, shutdown.\n- Call \"Report Actions\" tool → For handling all reports and summaries, including weekly, monthly, daily.\n\nExample outputs:\n\n\"query\": \n{\n\"chatInput\": \n\"Delete trash mails\",\n\"instructions\": \n\"Please delete all messages from the trash folder in the mail account.\"\n}\n"
        }
      },
      "id": "c6fed444-2f9c-4cbb-ae1c-ea4a7ec5f0ab",
      "name": "Director of Operations",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        464,
        -640
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.action }}",
        "options": {
          "systemMessage": "You are a helpful Director of Product Assistant.\nMy name is Sergiu.\n\n🔑 Rules:\n- Do not just provide chat feedback. Trigger tools only and provide feedback from tools.\n- Call \"Git Actions\" tool → For handling all git updates, git pulls, git latest, pull requests, merge requests, pr's, mr's, code reviews, etc.\n- Call \"JIRA Actions\" tool → For creating OR querying JIRA issues:\n  \n  CREATE operations:\n  * Parse user request to extract: issue type (task/bug/feature/story), summary/title, description, and priority\n  * Map \"feature\" requests to \"Story\" issue type\n  * Set operation to \"create\"\n  * Default to \"Task\" if issue type is unclear\n  * Provide all required fields: operation, issueType, summary, description, priority\n  \n  QUERY operations:\n  * For \"sprint tasks\", \"tasks in sprint\", \"current sprint\" → Set operation to \"query-sprint\"\n  * For \"backlog tasks\", \"tasks in backlog\", \"backlog\" → Set operation to \"query-backlog\"\n  * For \"my tasks\", \"tasks assigned to me\", \"assigned to Sergiu\" → Set operation to \"query-assigned\"\n  * IMPORTANT: For query operations, provide EMPTY STRINGS for issueType, summary, description, and priority (do not omit them)\n\nExample outputs:\n\n\"query for Git\": \n{\n\"chatInput\": \"Check prs\",\n\"instructions\": \"Please check if any pull requests are available.\"\n}\n\n\"create JIRA Task\": \n{\n\"operation\": \"create\",\n\"issueType\": \"Task\",\n\"summary\": \"Fix login authentication bug\",\n\"description\": \"Users are unable to login with valid credentials. Error occurs on the login page after submitting the form.\",\n\"priority\": \"High\"\n}\n\n\"create JIRA Bug\": \n{\n\"operation\": \"create\",\n\"issueType\": \"Bug\",\n\"summary\": \"Payment system not processing refunds\",\n\"description\": \"The payment system fails to process refund requests for orders over $100.\",\n\"priority\": \"High\"\n}\n\n\"create JIRA Feature/Story\": \n{\n\"operation\": \"create\",\n\"issueType\": \"Story\",\n\"summary\": \"Add dark mode to user interface\",\n\"description\": \"Implement a dark mode theme option for the application to improve user experience and reduce eye strain.\",\n\"priority\": \"Medium\"\n}\n\n\"query sprint tasks\": \n{\n\"operation\": \"query-sprint\",\n\"issueType\": \"\",\n\"summary\": \"\",\n\"description\": \"\",\n\"priority\": \"\"\n}\n\n\"query backlog tasks\": \n{\n\"operation\": \"query-backlog\",\n\"issueType\": \"\",\n\"summary\": \"\",\n\"description\": \"\",\n\"priority\": \"\"\n}\n\n\"query my tasks\": \n{\n\"operation\": \"query-assigned\",\n\"issueType\": \"\",\n\"summary\": \"\",\n\"description\": \"\",\n\"priority\": \"\"\n}"
        }
      },
      "id": "276c2330-29d7-44fc-bd7a-f00353637d70",
      "name": "Director of Product",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -256,
        -528
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.action }}",
        "options": {
          "systemMessage": "You are a helpful Director of Engineering Agent. \nMy name is Sergiu.\n\n📁 Default Working Directory: C:\\Dev\n- When file paths are not specified by the user, use C:\\Dev as the default directory\n- For script creation without a specified path, create files in C:\\Dev\n- If the user provides an explicit path, use that path instead\n\n🔑 Rules:\n- Do not just provide chat feedback. Trigger tools only.\n- For script creation, automation scripts, or any scripting tasks → Call \"DevOps Engineer Agent\" tool (which will use RW Actions to create the script)\n  * IMPORTANT: When delegating file operations (create/read/delete), you MUST specify the full file path in your request\n  * If user didn't specify a path, use C:\\Dev\\<filename> as the default\n  * Always include the file extension (.ps1, .bat, .sh, .py, .txt, etc.)\n  * Example: \"Create a PowerShell script named ping_google.ps1 at C:\\Dev\\ping_google.ps1 that pings google.com\"\n- For architecture decisions and system design → Call \"Software Architect Agent\" tool\n- For UI/UX and frontend tasks → Call \"Frontend Developer Agent\" tool\n- For backend, API, and database tasks → Call \"Backend Developer Agent\" tool\n- For testing and quality assurance → Call \"QA Test Engineer Agent\" tool\n- For security assessments → Call \"Security Engineer Agent\" tool\n- For research and exploration → Call \"Research Engineer Agent\" tool"
        }
      },
      "id": "60250223-bb4f-40f9-98a2-2ed7b59ca69c",
      "name": "Director of Engineering",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -256,
        -176
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "toolDescription": "You are a DevOps Engineer Agent. \nYou manage CI/CD pipelines, cloud deployments, and infrastructure as code.\n\nCall this AI Agent that specializes in CI/CD pipelines, infrastructure automation, containerization, and deployment strategies\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"pipeline\": \"devops task\" },\n  \"response\": \"DevOps solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "ab928e79-a52a-434c-b496-6f771cec5394",
      "name": "Research Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        1280,
        224
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "description": "Call this tool to handle all reports, totals and summaries, including weekly, monthly, daily.\n",
        "workflowId": {
          "__rl": true,
          "value": "bT8VKE7JFnOTfSaU",
          "mode": "list",
          "cachedResultName": "report-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        800,
        -336
      ],
      "id": "05e37d58-1c76-4466-ae43-c3787f6402b2",
      "name": "Report Actions"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "o3",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "4c946db5-ebab-4524-80e9-f2c433dc8180",
      "name": "Product",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -256,
        -336
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "14e95bd7-32fe-406a-b144-9e776abd8119",
      "name": "Expert",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -256,
        592
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "o3",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "78a4855b-2a0d-4fe4-965f-592581dd1f01",
      "name": "Engineer",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -256,
        64
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{ (() => {\n  const a = String($json.agent ?? '').trim().toLowerCase();\n  const map = {\n    'director of operations': 0,\n    'director of product': 1,\n    'director of engineering': 2,\n  };\n  return map[a] ?? -1; // -1 routes to fallback (enable it)\n})() }}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -544,
        -624
      ],
      "id": "403dfa14-a6de-430f-a8cb-9e49aebff8a1",
      "name": "Domain Decision"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let parsed;\n  let outputText = item.json.output || '';\n  \n  // Handle case where output might be wrapped in markdown code blocks\n  let jsonText = outputText.replace(/^```json\\n?/, '').replace(/\\n?```$/, '').trim();\n  \n  try {\n    parsed = JSON.parse(jsonText);\n    return { \n      json: {\n        action: parsed.action || 'UNKNOWN',\n        agent: parsed.agent || 'UNKNOWN'\n      }\n    };\n  } catch (e) {\n    // Try to extract JSON from the text using regex\n    const jsonMatch = outputText.match(/{[\\s\\S]*?}/);\n    if (jsonMatch) {\n      try {\n        parsed = JSON.parse(jsonMatch[0]);\n        return { \n          json: {\n            action: parsed.action || 'UNKNOWN',\n            agent: parsed.agent || 'UNKNOWN'\n          }\n        };\n      } catch (e2) {\n        // Fallback: try to extract values manually\n        const actionMatch = outputText.match(/\"action\"\\s*:\\s*\"([^\"]*)\"/);\n        const agentMatch = outputText.match(/\"agent\"\\s*:\\s*\"([^\"]*)\"/);\n        \n        if (actionMatch && agentMatch) {\n          return { \n            json: {\n              action: actionMatch[1],\n              agent: agentMatch[1]\n            }\n          };\n        }\n      }\n    }\n    \n    // Final fallback\n    console.log('Failed to parse JSON from output:', outputText);\n    return { \n      json: {\n        action: \"UNKNOWN\",\n        agent: \"Chat Agent\"\n      }\n    };\n  }\n});\n"
      },
      "id": "027de5ee-1cda-44d3-a566-c15fc68c6c61",
      "name": "Operation Parser",
      "type": "n8n-nodes-base.code",
      "position": [
        -720,
        -608
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "o3",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "e6d28206-9d90-487e-857b-1edd5b113629",
      "name": "Operations",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        352,
        -336
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 500000000
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1328,
        -416
      ],
      "id": "fca25410-3200-435d-b74a-c3243013daaf",
      "name": "Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "CTO Agent": {
      "main": [
        [
          {
            "node": "Operation Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "JIRA Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "CI/CD Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "RW Actions": {
      "ai_tool": [
        [
          {
            "node": "Research Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "DevOps Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Security Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "QA Test Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Backend Developer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Frontend Developer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Software Architect Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Frontend Developer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Backend Developer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "QA Test Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Security Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "DevOps Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Software Architect Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mail Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "News Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Win Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "CTO Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model": {
      "ai_languageModel": [
        [
          {
            "node": "CTO Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Research Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Report Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Product": {
      "ai_languageModel": [
        [
          {
            "node": "Director of Product",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Expert": {
      "ai_languageModel": [
        [
          {
            "node": "Software Architect Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Frontend Developer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Backend Developer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "QA Test Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Security Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "DevOps Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Research Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Engineer": {
      "ai_languageModel": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Domain Decision": {
      "main": [
        [
          {
            "node": "Director of Operations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Director of Product",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Director of Engineering",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Operation Parser": {
      "main": [
        [
          {
            "node": "Domain Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Operations": {
      "ai_languageModel": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "When chat message received",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "CTO Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "57414830-c84e-4194-8577-be5bf242abc2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3fdd671e7fc1859ff2383b05c6eea518207a3d971ca0642cd42531697f273a8c"
  },
  "id": "dE1U8rzi5S6fdB9E",
  "tags": []
}