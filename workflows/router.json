{
  "name": "router",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a routing agent. Analyze the user request and output ONLY a JSON object with the routing decision.\nMake sure to pass chatInput content in the output json as well\n\nRouting rules:\n- For emails, drafts, spam, trash, reports, weekly report, totals, summaries, windows, pc, restart, reboot, startup, shutdown, news, or newsletters → Director of Operations\n- For git, prs, code review, pull requests, merge requests, updates, repositories, JIRA, tickets, issues, CI/CD, build, deploy, pipeline, general chat/questions → Director of Product\n- For engineering, development, research, and read, write or delete operations → Director of Engineering\n\nOutput format:\n{\n  \"action\": \"<describe the user request>\",\n  \"agent\": \"<Agent Name>\"\n}\n\nExample outputs:\n{\"action\": \"Clean email spam\", \"agent\": \"Director of Operations\"}\n{\"action\": \"Shutdown computer\", \"agent\": \"Director of Operations\"}"
        }
      },
      "id": "2cc7ca0c-d8c1-402f-8fa3-9a1d35dfee1b",
      "name": "CTO Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -48,
        -256
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "content": "\n\n## 🧠 **CTO AI Agent Multi-Domain Router**\n\n\nThis n8n workflow routes every chat through a **CTO Agent** (O3) which analyzes requests and routes through an **Operation Decision** node to three Director-level agents for specialized domains.\n\n### ⚙️ How it works\n1) **Chat Trigger ➜ CTO Agent (O3) ➜ Operation Decision ➜ Decision Switch**  \n   CTO analyzes user requests and outputs JSON routing decisions with memory persistence. Operation Decision node parses JSON and Decision Switch routes to appropriate Director based on agent type.\n\n2) **Three-Domain Director Architecture**\n   - **Director of Operations** *(Operations & System Management)*\n     - **Mail Actions** (spam, drafts, trash cleanup, mail replies)\n     - **News Actions** (newsletters, latest news updates)\n     - **Win Actions** (shutdown, reboot, startup, system operations)\n     - **Report Actions** (weekly/monthly reports, summaries, analytics)\n   \n   - **Director of Product** *(Development Workflows & Project Management)*\n     - **Git Actions** (repos, PRs, code reviews, repository updates) \n     - **JIRA Actions** (tickets, issues, project tracking)\n     - **Chat Actions** (general conversations)\n     - **CI/CD Actions** (build, deploy, pipelines)\n   \n   - **Director of Engineering** *(Technical Expertise & Development)*\n     - **7 Specialist Engineer Agents** with shared **RW Actions**:\n       - Software Architect, Frontend Developer, Backend Developer\n       - QA Test Engineer, Security Engineer, DevOps Engineer, Research Engineer\n     - **RW Actions** (unified file read, write, delete operations with AI classification)\n     - **Think** tool for coordination and planning\n\n3) **Robust Operation Decision & Switch**\n   - Advanced JSON parsing with multiple fallback mechanisms\n   - Handles markdown code blocks and malformed JSON\n   - Expression-based Decision Switch routes to Directors based on agent mapping\n\n### 🧩 Models & Architecture\n- **CTO Agent:** O3 (Model)\n- **Director of Operations:** O3 (General)\n- **Director of Product:** O3 (Product) \n- **Director of Engineering:** O3 (Engineering)\n- **7 Engineering Specialists:** GPT-4.1-mini (Specialist)\n\n### 🔧 Unified Tools\n- **Git Actions:** Unified git-tool handling PR reviews and repository updates\n- **RW Actions:** Unified file-tool with AI classification for read/write/delete operations\n- **Mail Actions:** Email management with AI operation classification\n- **Win Actions:** System operations (startup, shutdown, reboot)\n- **News Actions:** Newsletter and news aggregation\n- **Report Actions:** Analytics and reporting generation\n\n> **Usage:** CTO automatically routes requests through Director-level coordination—ask for emails/system operations, reports/git/JIRA tasks, or technical engineering solutions including file operations. Each Director manages specialized tools and actions for their domain.",
        "height": 1236,
        "width": 900,
        "color": 7
      },
      "id": "95c6cd83-7cf2-4170-9846-c45d9bbc41ef",
      "name": "Sticky Note Main",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -352,
        64
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "description": "Call this tool to handle all git updates, git pulls, git latest, pull requests, merge requests, pr's, mr's, code reviews, etc.\n",
        "workflowId": {
          "__rl": true,
          "value": "E58bptNtshnefZyz",
          "mode": "list",
          "cachedResultName": "git-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        944,
        256
      ],
      "id": "4dc86556-59f9-4559-bb0a-59b63d3627b9",
      "name": "Git Actions"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1056,
        256
      ],
      "id": "fd6b9902-8329-4986-9bf1-f4e2209480b2",
      "name": "JIRA Actions"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1168,
        256
      ],
      "id": "6612af80-0299-4770-b9ae-66e2a665d8a2",
      "name": "Chat Actions"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1280,
        256
      ],
      "id": "82ede10a-aec1-445d-ae2e-1d94f6323562",
      "name": "CI/CD Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to handle all read, write, delete file operations.",
        "workflowId": {
          "__rl": true,
          "value": "vvKOjDSXDqyYbpok",
          "mode": "list",
          "cachedResultName": "rw-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "name": "RW Actions",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        2400,
        1200
      ],
      "id": "6c9457df-7f35-442c-850a-29295a1667ba"
    },
    {
      "parameters": {
        "toolDescription": "You are a Frontend Developer Agent. \nYou implement UI/UX, responsive design, and frontend frameworks.\n\nCall this AI Agent that specializes in user interface development, responsive design, frontend frameworks, and user experience optimization\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"ui\": \"frontend task\" },\n  \"response\": \"Frontend solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "b6ea230d-abeb-4c32-9ea9-adc999b76eac",
      "name": "Frontend Developer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        976,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a Backend Developer Agent. \nYou implement APIs, databases, and backend services.\n\nCall this AI Agent that specializes in server-side development, API design, database architecture, and microservices implementation\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"service\": \"backend task\" },\n  \"response\": \"Backend solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "c1c8ae9a-e230-409f-91d3-5bf3849de4c2",
      "name": "Backend Developer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        1232,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a QA Test Engineer Agent. \nYou ensure quality through test design, automation, and validation.\n\nCall this AI Agent that specializes in test automation, quality assurance strategies, test case design, and performance testing\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"test\": \"qa task\" },\n  \"response\": \"QA solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "f30936c1-fe13-4882-b7a7-5ffb3159d1d3",
      "name": "QA Test Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        1488,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a Security Engineer Agent. \nYou identify vulnerabilities, enforce best practices, and improve compliance.\n\nCall this AI Agent that specializes in application security, vulnerability assessments, secure coding practices, and compliance frameworks\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"security\": \"security task\" },\n  \"response\": \"Security advice for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "275c5be3-d83a-4cc1-9460-522da270dbc6",
      "name": "Security Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        1744,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a DevOps Engineer Agent. \nYou manage CI/CD pipelines, cloud deployments, and infrastructure as code.\n\nCall this AI Agent that specializes in CI/CD pipelines, infrastructure automation, containerization, and deployment strategies\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"pipeline\": \"devops task\" },\n  \"response\": \"DevOps solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "5fe6eee0-7477-48c6-a2de-ab68045ee186",
      "name": "DevOps Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        2000,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "toolDescription": "You are a Software Architect Agent. \nYou design scalable systems, select patterns, and propose high-level solutions.\n\nCall this AI Agent that specializes in system architecture, design patterns, technology stack decisions, and scalability planning\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"system\": \"architecture details\" },\n  \"response\": \"Architecture proposal for Sergiu\"\n}",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "455d9fa1-02f6-401e-9379-ea644ca9b073",
      "name": "Software Architect Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        720,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "32854a2b-8f47-483f-90b1-39548acd7f79",
      "name": "Think",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        880,
        608
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "description": "Call this tool to handle, drafts, draft cleanup, spam, spam cleanup, trash, trash cleanup, as well as mail replies or creation of new mail drafts",
        "workflowId": {
          "__rl": true,
          "value": "luB6neTADgM0YTIH",
          "mode": "list",
          "cachedResultName": "mail-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'Chat message or email content', 'string') }}",
            "emailInstructions": "={{ $fromAI('emailInstructions', 'Email instructions including recipient, subject context, and any specific requirements', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "Chat Input",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "emailInstructions",
              "displayName": "Email Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        944,
        -96
      ],
      "id": "10076a6b-2952-45dc-a5cd-80388c6e6a7f",
      "name": "Mail Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to handle news, newsletters, latest news, etc.",
        "workflowId": {
          "__rl": true,
          "value": "9MWvHmSry7VECDzJ",
          "mode": "list",
          "cachedResultName": "news-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'Chat message or email content', 'string') }}",
            "emailInstructions": "={{ $fromAI('emailInstructions', 'Email instructions including recipient, subject context, and any specific requirements', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "Chat Input",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "emailInstructions",
              "displayName": "Email Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1056,
        -96
      ],
      "id": "4804d919-1e91-46b7-aae9-0e61618c70ca",
      "name": "News Actions"
    },
    {
      "parameters": {
        "description": "Call this tool to handle windows, pc, admin stuff, such as startup, shutdown, restart, reboot, halt etc.",
        "workflowId": {
          "__rl": true,
          "value": "9MKVJd2X6cEHduCK",
          "mode": "list",
          "cachedResultName": "win-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('chatInput', 'Chat message or email content', 'string') }}",
            "emailInstructions": "={{ $fromAI('emailInstructions', 'Email instructions including recipient, subject context, and any specific requirements', 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "Chat Input",
              "required": true,
              "defaultValue": "",
              "type": "string"
            },
            {
              "id": "emailInstructions",
              "displayName": "Email Instructions",
              "required": true,
              "defaultValue": "",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1168,
        -96
      ],
      "id": "d2932734-c6fa-4ebd-98e9-bd244d61de9e",
      "name": "Win Actions"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let parsed;\n  let outputText = item.json.output || '';\n  \n  // Handle case where output might be wrapped in markdown code blocks\n  let jsonText = outputText.replace(/^```json\\n?/, '').replace(/\\n?```$/, '').trim();\n  \n  try {\n    parsed = JSON.parse(jsonText);\n    return { \n      json: {\n        action: parsed.action || 'UNKNOWN',\n        agent: parsed.agent || 'UNKNOWN'\n      }\n    };\n  } catch (e) {\n    // Try to extract JSON from the text using regex\n    const jsonMatch = outputText.match(/{[\\s\\S]*?}/);\n    if (jsonMatch) {\n      try {\n        parsed = JSON.parse(jsonMatch[0]);\n        return { \n          json: {\n            action: parsed.action || 'UNKNOWN',\n            agent: parsed.agent || 'UNKNOWN'\n          }\n        };\n      } catch (e2) {\n        // Fallback: try to extract values manually\n        const actionMatch = outputText.match(/\"action\"\\s*:\\s*\"([^\"]*)\"/);\n        const agentMatch = outputText.match(/\"agent\"\\s*:\\s*\"([^\"]*)\"/);\n        \n        if (actionMatch && agentMatch) {\n          return { \n            json: {\n              action: actionMatch[1],\n              agent: agentMatch[1]\n            }\n          };\n        }\n      }\n    }\n    \n    // Final fallback\n    console.log('Failed to parse JSON from output:', outputText);\n    return { \n      json: {\n        action: \"UNKNOWN\",\n        agent: \"Chat Agent\"\n      }\n    };\n  }\n});\n"
      },
      "id": "2baa39a1-1c03-478e-b738-d31d9329a3b6",
      "name": "Operation Decision",
      "type": "n8n-nodes-base.code",
      "position": [
        256,
        -256
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "loadPreviousSession": "memory"
        }
      },
      "id": "4309fe18-104b-4c27-912e-b61cb943b94b",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -352,
        -256
      ],
      "webhookId": "9eab0524-6cd7-4b81-8bd8-4d050a972a08",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3",
          "mode": "list",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "ba16a6ba-edae-44a7-9cef-aa6003acf6db",
      "name": "Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -48,
        -64
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 500000000
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -352,
        -64
      ],
      "id": "b83180c1-284d-40d8-b3db-5372b7a70ce9",
      "name": "Memory"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{ (() => {\n  const a = String($json.agent ?? '').trim().toLowerCase();\n  const map = {\n    'director of operations': 0,\n    'director of product': 1,\n    'director of engineering': 2,\n  };\n  return map[a] ?? -1; // -1 routes to fallback (enable it)\n})() }}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        448,
        -272
      ],
      "id": "a90be289-a2f1-4dc6-bbac-475f6b0e1640",
      "name": "Decision Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.action }}",
        "options": {
          "systemMessage": "You are a helpful Director of Operations Assistant. \nMy name is Sergiu.\n\n🔑 Rules:\n- Do not just provide chat feedback. Trigger tools only and provide feedback from tools.\n- Call \"Mail Actions\" tool → For emails, drafts, spam, trash.\n- Call \"News Actions\" tool → For news, newsletter, latest news.\n- Call \"Win Actions\" tool → For windows, pc, restart, reboot, startup, shutdown.\n- Call \"Report Actions\" tool → For handling all reports and summaries, including weekly, monthly, daily.\n\nExample outputs:\n\n\"query\": \n{\n\"chatInput\": \n\"Delete trash mails\",\n\"instructions\": \n\"Please delete all messages from the trash folder in the mail account.\"\n}\n"
        }
      },
      "id": "c78268ae-3c19-4ac6-ba23-5470b863116e",
      "name": "Director of Operations",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        720,
        -288
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.action }}",
        "options": {
          "systemMessage": "You are a helpful Director of Product Assistant.\nMy name is Sergiu.\n\n🔑 Rules:\n- Do not just provide chat feedback. Trigger tools only.\n- Call \"Git Actions\" tool → For handling all git updates, git pulls, git latest, pull requests, merge requests, pr's, mr's, code reviews, etc.\n\nExample outputs:\n\n\"query\": \n{\n\"chatInput\": \n\"Check prs\",\n\"instructions\": \n\"Please check if any pull requests are available.\"\n}"
        }
      },
      "id": "1146edb7-a148-4440-a51c-982dcf79b6c7",
      "name": "Director of Product",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        720,
        64
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.action }}",
        "options": {
          "systemMessage": "You are a helpful Director of Engineering Agent. \nMy name is Sergiu.\n\n🔑 Rules:\n- Do not just provide chat feedback. Trigger tools only.\n- For handling read, write or delete operations call \"RW Agent\" tool"
        }
      },
      "id": "36536d74-bae4-4989-a64b-9b8d03b00267",
      "name": "Director of Engineering",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        720,
        416
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "toolDescription": "You are a DevOps Engineer Agent. \nYou manage CI/CD pipelines, cloud deployments, and infrastructure as code.\n\nCall this AI Agent that specializes in CI/CD pipelines, infrastructure automation, containerization, and deployment strategies\n\n📤 Output JSON:\n{\n  \"action\": \"respond\",\n  \"tool\": \"None\",\n  \"arguments\": { \"pipeline\": \"devops task\" },\n  \"response\": \"DevOps solution for Sergiu\"\n}\n",
        "text": "={{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "id": "6b9bc652-a88d-49cc-804a-74dda3993f55",
      "name": "Research Engineer Agent",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        2256,
        752
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "description": "Call this tool to handle all reports, totals and summaries, including weekly, monthly, daily.\n",
        "workflowId": {
          "__rl": true,
          "value": "bT8VKE7JFnOTfSaU",
          "mode": "list",
          "cachedResultName": "report-tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1280,
        -96
      ],
      "id": "6e75bcc7-3cb5-4338-b849-a19da1db599e",
      "name": "Report Actions"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "2c7d61d7-bff8-4361-979d-9a4193a7ca6f",
      "name": "Specialist",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        720,
        1200
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "o3",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "ae252c74-9f52-4e98-9f6d-b941ffa5853a",
      "name": "General",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        720,
        -96
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "o3",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "427246e9-4953-45bd-877f-53cf36ff02ce",
      "name": "Product",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        720,
        256
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{ (() => {\n  const a = String($json.agent ?? '').trim().toLowerCase();\n  const map = {\n    'director of operations': 0,\n    'director of product': 1,\n    'director of engineering': 2,\n  };\n  return map[a] ?? -1; // -1 routes to fallback (enable it)\n})() }}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -464,
        -368
      ],
      "id": "012d5321-68e1-4477-b146-2cae5f26be0e",
      "name": "Domain Decision"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let parsed;\n  let outputText = item.json.output || '';\n  \n  // Handle case where output might be wrapped in markdown code blocks\n  let jsonText = outputText.replace(/^```json\\n?/, '').replace(/\\n?```$/, '').trim();\n  \n  try {\n    parsed = JSON.parse(jsonText);\n    return { \n      json: {\n        action: parsed.action || 'UNKNOWN',\n        agent: parsed.agent || 'UNKNOWN'\n      }\n    };\n  } catch (e) {\n    // Try to extract JSON from the text using regex\n    const jsonMatch = outputText.match(/{[\\s\\S]*?}/);\n    if (jsonMatch) {\n      try {\n        parsed = JSON.parse(jsonMatch[0]);\n        return { \n          json: {\n            action: parsed.action || 'UNKNOWN',\n            agent: parsed.agent || 'UNKNOWN'\n          }\n        };\n      } catch (e2) {\n        // Fallback: try to extract values manually\n        const actionMatch = outputText.match(/\"action\"\\s*:\\s*\"([^\"]*)\"/);\n        const agentMatch = outputText.match(/\"agent\"\\s*:\\s*\"([^\"]*)\"/);\n        \n        if (actionMatch && agentMatch) {\n          return { \n            json: {\n              action: actionMatch[1],\n              agent: agentMatch[1]\n            }\n          };\n        }\n      }\n    }\n    \n    // Final fallback\n    console.log('Failed to parse JSON from output:', outputText);\n    return { \n      json: {\n        action: \"UNKNOWN\",\n        agent: \"Chat Agent\"\n      }\n    };\n  }\n});\n"
      },
      "id": "b63b91e9-5d8b-4ca3-90d6-cb6e043c9dbd",
      "name": "Operation Parser",
      "type": "n8n-nodes-base.code",
      "position": [
        -640,
        -352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "o3",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "id": "8691cf78-83cf-4822-b672-3fa0a5e681dc",
      "name": "Engineering",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        720,
        608
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "CTO Agent": {
      "main": [
        [
          {
            "node": "Operation Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RW Actions": {
      "ai_tool": [
        [
          {
            "node": "Research Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "DevOps Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Security Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "QA Test Engineer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Backend Developer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Frontend Developer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Software Architect Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Frontend Developer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Backend Developer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "QA Test Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Security Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "DevOps Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Software Architect Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "CI/CD Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "JIRA Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Git Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Product",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Win Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "News Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mail Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Operation Decision": {
      "main": [
        [
          {
            "node": "Decision Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "CTO Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model": {
      "ai_languageModel": [
        [
          {
            "node": "CTO Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "CTO Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "When chat message received",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Decision Switch": {
      "main": [
        [
          {
            "node": "Director of Operations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Director of Product",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Director of Engineering",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Engineer Agent": {
      "ai_tool": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Report Actions": {
      "ai_tool": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Specialist": {
      "ai_languageModel": [
        [
          {
            "node": "Software Architect Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Frontend Developer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Backend Developer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "QA Test Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Security Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "DevOps Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Research Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "General": {
      "ai_languageModel": [
        [
          {
            "node": "Director of Operations",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Product": {
      "ai_languageModel": [
        [
          {
            "node": "Director of Product",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Engineering": {
      "ai_languageModel": [
        [
          {
            "node": "Director of Engineering",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b1239375-83ed-4afb-b452-36854c33442d",
  "meta": {
    "instanceId": "3fdd671e7fc1859ff2383b05c6eea518207a3d971ca0642cd42531697f273a8c"
  },
  "id": "ie0wpP3U9v0pVTfh",
  "tags": []
}