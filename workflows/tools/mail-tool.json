{
  "name": "mail-tool",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -240,
        -96
      ],
      "id": "30f3b3fb-05f1-4659-a973-ad1821eb264c",
      "name": "Executed by other flow"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput + ' ' + ($json.emailInstructions || '') }}",
        "messages": {
          "messageValues": [
            {
              "message": "You are an AI operation classifier for email tasks. Analyze the user's request and determine which email operation they want to perform.|Available operations:1. **CREATE_DRAFT** - User wants to compose, write, create, or draft a new email2. **CLEAN_SPAM** - User wants to clean, delete, or remove spam emails3. **CLEAN_DRAFTS** - User wants to clean, delete, or remove draft emails4. **CLEAN_TRASH** - User wants to clean, delete, or remove trash/deleted emails5. **REPLY_EMAIL** - User wants to auto-reply to incoming emails from IMAPAnalyze the user request: '{{ $json.chatInput }}'Email instructions: '{{ $json.emailInstructions || 'None provided' }}'Examples:- 'Create a new email' → CREATE_DRAFT- 'Write an email to John' → CREATE_DRAFT  - 'Draft a reply to the meeting request' → CREATE_DRAFT- 'Clean up spam emails' → CLEAN_SPAM- 'Delete all spam' → CLEAN_SPAM- 'Remove draft emails' → CLEAN_DRAFTS- 'Clear my drafts folder' → CLEAN_DRAFTS- 'Empty trash' → CLEAN_TRASH- 'Delete trash emails' → CLEAN_TRASH- 'Auto-reply to emails' → REPLY_EMAIL- 'Reply to incoming emails' → REPLY_EMAILIMPORTANT: Respond with ONLY the operation name in JSON format:{\"operation\": \"CREATE_DRAFT\"}{\"operation\": \"CLEAN_SPAM\"}{\"operation\": \"CLEAN_DRAFTS\"}{\"operation\": \"CLEAN_TRASH\"}{\"operation\": \"REPLY_EMAIL\"}If unclear, default to CREATE_DRAFT. Also send the input as a result too."
            }
          ]
        }
      },
      "id": "88cff77d-e6c4-4bdf-a83f-add6aefc0e25",
      "name": "AI Operation Classifier",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -80,
        -96
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "jsCode": "// Get the original input from the workflow trigger\nconst originalInput = $('Executed by other flow').first().json;\n\nreturn items.map(item => {\n  let parsed;\n  try {\n    parsed = JSON.parse(item.json.text);\n    // Merge with original input data\n    return { \n      json: {\n        ...item.json,\n        ...parsed,\n        originalChatInput: originalInput.chatInput,\n        originalEmailInstructions: originalInput.emailInstructions\n      }\n    };\n  } catch (e) {\n    // Default to CREATE_DRAFT if parsing fails\n    return { \n      json: {\n        ...item.json,\n        operation: \"CREATE_DRAFT\",\n        originalChatInput: originalInput.chatInput,\n        originalEmailInstructions: originalInput.emailInstructions\n      }\n    };\n  }\n});"
      },
      "id": "8b915b39-7544-4d73-82b7-e371b1049e89",
      "name": "Parse Operation Decision",
      "type": "n8n-nodes-base.code",
      "position": [
        208,
        -96
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.originalChatInput}}",
        "messages": {
          "messageValues": [
            {
              "message": "You are an AI email writing assistant. Your task is to generate professional, well-structured emails based on the provided context and instructions.\n\nGuidelines:\n- Always address the sender by name if provided\n- Keep the tone respectful, clear, and professional\n- Structure the email with proper greeting, body, and closing\n- Every new sentence in the body should be from new line\n- Ensure proper grammar and formatting for paragraphs in the body\n- Include all necessary information mentioned\n- Summarize long emails before replying if needed\n- Provide clear answers or actions, and confirm receipt when appropriate\n- If the request is unclear, politely ask for clarification\n- Keep replies short (3–6 sentences), unless a longer explanation is required\n- Use correct grammar and formatting\n- Do not include subject line in the email body\n\nEmail structure example:\n'Dear [RECIPIENT],\n\nThank you for your message.\n\nI appreciate you taking the time to review my application and proceed accordingly.\nPlease let me know if you need any additional information from my side.\n\nBest regards,\nSergiu'\n\nInput Instructions: {{ $json.originalEmailInstructions }}\nContext/Purpose: get the context from the instructions\nSubject/Title: add subject or topic of email based on the instructions\n\nOutput: Drafted email reply body, with Best Regards, my name is Sergiu. Also add subject into output json under subject key."
            }
          ]
        }
      },
      "id": "6d6a6e4b-0cfe-46b9-8270-a9e9c89aad4f",
      "name": "Generate Email with AI",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        720,
        -432
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let parsed;\n  try {\n    parsed = JSON.parse(item.json.text);\n  } catch (e) {\n    parsed = { subject: \"\", body: item.json.text };\n  }\n  return { json: parsed };\n});"
      },
      "id": "4a0a2db3-e7e3-4f8a-9ed3-c37bb0065072",
      "name": "Parse AI Response",
      "type": "n8n-nodes-base.code",
      "position": [
        1024,
        -432
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.message }}",
        "options": {
          "sendTo": ""
        }
      },
      "id": "ed9ca22d-8b34-4d2e-b2ac-f907a56b1746",
      "name": "Save as Gmail Draft",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1392,
        -432
      ],
      "typeVersion": 2.1,
      "webhookId": "d298ef6b-b892-4eee-be31-caea6f5affdd",
      "credentials": {
        "gmailOAuth2": {
          "id": "6ZNnHZRObc0alAvd",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "labelIds": [
            "={{ $json.folderType }}"
          ]
        }
      },
      "id": "9daf2333-2693-4dd9-8347-a6dd8533305d",
      "name": "Fetch Emails",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1200,
        -96
      ],
      "typeVersion": 2.1,
      "alwaysOutputData": true,
      "webhookId": "7127f697-ab74-4b80-aa12-1a9bf98a744a",
      "credentials": {
        "gmailOAuth2": {
          "id": "6ZNnHZRObc0alAvd",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "emails-exist-check",
              "leftValue": "={{ $json }}",
              "rightValue": 0,
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "c8165a1c-236f-4d5c-ad26-d69d779b2376",
      "name": "Check if Emails Exist",
      "type": "n8n-nodes-base.if",
      "position": [
        1392,
        -96
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "delete",
        "messageId": "={{ $json.id }}"
      },
      "id": "7e605508-fbd7-407b-8ad3-60c1e19ab35c",
      "name": "Delete Email",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1760,
        -96
      ],
      "typeVersion": 2.1,
      "webhookId": "e4db125e-a260-45b0-b56c-2928e91ea6f4",
      "credentials": {
        "gmailOAuth2": {
          "id": "6ZNnHZRObc0alAvd",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": []
        },
        "options": {}
      },
      "id": "3fc08408-7124-4fb5-bdb7-508853413ab6",
      "name": "No Emails Found",
      "type": "n8n-nodes-base.set",
      "position": [
        1600,
        64
      ],
      "typeVersion": 3.4,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fromEmail": "jomirusergiu@gmail.com",
        "toEmail": "jomirusergiu@gmail.com",
        "subject": "=Mail Cleanup Report - no emails were found",
        "emailFormat": "text",
        "text": "=Mail Cleanup completed successfully.\n\nNo emails were found in the specified folder.\n\nCleanup Date: {{ $now.format(\"MMM dd, yyyy HH:mm:ss\") }}",
        "options": {
          "appendAttribution": false,
          "allowUnauthorizedCerts": true
        }
      },
      "id": "bef9658b-0f14-4719-abb1-a5cbc3d14d95",
      "name": "Send No Emails Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2080,
        64
      ],
      "webhookId": "ae27f554-7b8a-4406-be36-4b01edfd300a",
      "credentials": {
        "smtp": {
          "id": "hDZ18LOe4Kax4dpH",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        192,
        592
      ],
      "id": "abd03a2c-451f-49e2-a2d1-9db405c09216",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "folder-type",
              "name": "folderType",
              "type": "string",
              "value": "SPAM"
            },
            {
              "id": "operation-type",
              "name": "operationType",
              "type": "string",
              "value": "clean_spam"
            },
            {
              "id": "cleanup-type",
              "name": "cleanupType",
              "type": "string",
              "value": "Spam"
            }
          ]
        },
        "options": {}
      },
      "id": "ed91120e-d2c8-463f-bcf6-eff489b777b0",
      "name": "Spam Parameters",
      "type": "n8n-nodes-base.set",
      "position": [
        1024,
        -96
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "folder-type",
              "name": "folderType",
              "type": "string",
              "value": "DRAFT"
            },
            {
              "id": "operation-type",
              "name": "operationType",
              "type": "string",
              "value": "clean_drafts"
            },
            {
              "id": "cleanup-type",
              "name": "cleanupType",
              "type": "string",
              "value": "Draft"
            }
          ]
        },
        "options": {}
      },
      "id": "a85bc058-12cd-4afa-b5ed-8c334dc37d3e",
      "name": "Draft Parameters",
      "type": "n8n-nodes-base.set",
      "position": [
        1024,
        -272
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "folder-type",
              "name": "folderType",
              "type": "string",
              "value": "TRASH"
            },
            {
              "id": "operation-type",
              "name": "operationType",
              "type": "string",
              "value": "clean_trash"
            },
            {
              "id": "cleanup-type",
              "name": "cleanupType",
              "type": "string",
              "value": "Trash"
            }
          ]
        },
        "options": {}
      },
      "id": "64cbf333-0108-42c6-b81f-48076e11ac67",
      "name": "Trash Parameters",
      "type": "n8n-nodes-base.set",
      "position": [
        1024,
        64
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "subject-assignment",
              "name": "subject",
              "type": "string",
              "value": "={{ $json.subject }}"
            },
            {
              "id": "message-assignment",
              "name": "message",
              "type": "string",
              "value": "={{ $json.body }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f1b2ce6b-8fa3-4a02-a44c-06c6b637adad",
      "name": "Prepare Email",
      "type": "n8n-nodes-base.set",
      "position": [
        1200,
        -432
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {},
      "id": "791e9e50-b237-45eb-ae39-8e25b149a969",
      "name": "Pause Deletion (5s)",
      "type": "n8n-nodes-base.wait",
      "position": [
        1600,
        -96
      ],
      "typeVersion": 1.1,
      "webhookId": "0919dfb4-0d8e-46d0-ab27-a20d86215162"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 5,
        "output": "={{ (() => {\n  const a = String($json.operation ?? '').trim().toLowerCase();\n  const map = {\n    'create_draft': 0,\n    'clean_drafts': 1,\n    'clean_spam': 2,\n    'clean_trash': 3,\n    'reply_email': 4,\n  };\n  return map[a] ?? -1; // -1 routes to fallback (enable it)\n})() }}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        416,
        -144
      ],
      "id": "b8ecf31f-a55b-44bf-a5d6-5a26c90784dc",
      "name": "Domain Decision"
    },
    {
      "parameters": {
        "jsCode": "// Get the cleanup type from the executed Set Parameters nodes\nlet cleanupType = 'Unknown';\n\n// Check which Set Parameters node was executed by looking at the workflow execution context\ntry {\n  // Try to get from Set Draft Clean Parameters\n  const draftParams = $('Draft Parameters').first();\n  if (draftParams && draftParams.json) {\n    cleanupType = 'Draft';\n  }\n} catch (e) {}\n\ntry {\n  // Try to get from Set Spam Clean Parameters  \n  const spamParams = $('Spam Parameters').first();\n  if (spamParams && spamParams.json) {\n    cleanupType = 'Spam';\n  }\n} catch (e) {}\n\ntry {\n  // Try to get from Set Trash Clean Parameters\n  const trashParams = $('Trash Parameters').first();\n  if (trashParams && trashParams.json) {\n    cleanupType = 'Trash';\n  }\n} catch (e) {}\n\n// Aggregate all deleted emails and add cleanup type\nreturn [{\n  json: {\n    deleted_emails: items.map(item => item.json),\n    cleanupType: cleanupType,\n    totalDeleted: items.length\n  }\n}];"
      },
      "id": "c76ad196-4913-4d7c-9860-147662e1ceae",
      "name": "Aggregate Emails",
      "type": "n8n-nodes-base.code",
      "position": [
        1920,
        -96
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fromEmail": "jomirusergiu@gmail.com",
        "toEmail": "jomirusergiu@gmail.com",
        "subject": "=Mail {{ $json.cleanupType }} Cleanup Report - {{ $json.totalDeleted }} emails deleted",
        "emailFormat": "text",
        "text": "=Mail {{ $json.cleanupType }} Cleanup completed successfully.\n\n{{ $json.totalDeleted }} emails were permanently deleted from your Gmail account.\n\nCleanup Date: {{ $now.format(\"MMM dd, yyyy HH:mm:ss\") }}",
        "options": {
          "appendAttribution": false,
          "allowUnauthorizedCerts": true
        }
      },
      "id": "b7e3d351-c49d-4220-9bac-dcaff47681bb",
      "name": "Send Clean Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2080,
        -96
      ],
      "webhookId": "3f4b5a8d-099c-4808-81c0-9179c269fe8d",
      "credentials": {
        "smtp": {
          "id": "hDZ18LOe4Kax4dpH",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "600f94bc-c1d2-4933-8f9d-f7b9e1317a0f",
      "name": "Check New Email (IMAP)",
      "type": "n8n-nodes-base.emailReadImap",
      "position": [
        416,
        240
      ],
      "typeVersion": 2,
      "credentials": {
        "imap": {
          "id": "NBfMzCctD9ha97vJ",
          "name": "IMAP account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "c1e4c0b4-7a5b-4b19-8f3e-2d1c9e8f7a6b",
              "leftValue": "={{ $json.from }}",
              "rightValue": "jomirusergiu@gmail.com",
              "operator": {
                "type": "string",
                "operation": "notContains",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5586824-55be-4978-b2b5-243a70d60232",
      "name": "Filter Out Own Emails",
      "type": "n8n-nodes-base.if",
      "position": [
        864,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Sender: {{ $json.from }}\n\nEmail Content:\n{{ $json.textPlain }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You are an AI email assistant.  \nYour task is to generate professional, well-structured email replies based on the incoming email content.  \n\nGuidelines:\n- Extract the sender's name from the 'Sender' field. If it contains a name before the email address (e.g., 'John Doe <john@example.com>'), use that name. Otherwise, use a generic greeting.\n- Always address the sender by their actual name in the greeting (e.g., 'Dear John,' or 'Dear Mr. Smith,').\n- Keep the tone respectful, clear, and professional. \n- Structure the email with proper greeting, body, and closing \n- Every new sentence in the body should be from new line\n- Ensure proper grammar and formatting for paragraphs in the body\n- Include all necessary information mentioned\n- Summarize long emails before replying if needed.  \n- Provide clear answers or actions, and confirm receipt when appropriate.  \n- If the request is unclear, politely ask for clarification.  \n- Keep replies short (3–6 sentences), unless a longer explanation is required.  \n- Use correct grammar and formatting.  \n- Do not include subject line in the email body \n\nEmail structure example:\n'Dear John,\n\nThank you for your message.\n\nI appreciate you taking the time to review my application and proceed accordingly.\nPlease let me know if you need any additional information from my side.\n\nBest regards,\nSergiu'\n\nInput: The sender information and email content are provided above.\n\nOutput: Drafted email reply body only, with Best Regards, my name is Sergiu. Use the actual sender's name in the greeting."
            }
          ]
        }
      },
      "id": "1ed8b927-0afb-4e67-a17c-1dad50496912",
      "name": "Process Email with AI (Reply)",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1088,
        240
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7d428c48-4809-45d8-ba1e-c96d68c02c07",
              "name": "to",
              "type": "string",
              "value": "={{ $('Check New Email (IMAP)').first().json.from }}"
            },
            {
              "id": "63b99545-3d2d-4563-b9d7-078cbc20dbcc",
              "name": "subject",
              "type": "string",
              "value": "=Re: {{ $('Check New Email (IMAP)').first().json.subject }}"
            },
            {
              "id": "11d94d3f-2170-4b54-b5f9-b85bb95ad472",
              "name": "text",
              "type": "string",
              "value": "={{ $json.text }}\n\nOn {{ $('Check New Email (IMAP)').first().json.date }}, {{ $('Check New Email (IMAP)').first().json.from }} wrote:\n> {{ $('Check New Email (IMAP)').first().json.textPlain.replace(/\\n/g, '\\n> ') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5b44f78e-6ee2-41c8-99c7-8be9f9eeca6b",
      "name": "Prepare Email Reply Content",
      "type": "n8n-nodes-base.set",
      "position": [
        1392,
        240
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.text }}",
        "options": {}
      },
      "id": "7437f5e4-6808-4623-87f7-80270eaa992c",
      "name": "Save as Gmail Draft1",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1776,
        240
      ],
      "webhookId": "12345678-90ab-cdef-1234-567890abcdef",
      "typeVersion": 2.1,
      "credentials": {
        "gmailOAuth2": {
          "id": "6ZNnHZRObc0alAvd",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {},
      "id": "370f7068-f275-4319-94d1-4083cad59404",
      "name": "Pause",
      "type": "n8n-nodes-base.wait",
      "position": [
        1600,
        240
      ],
      "webhookId": "0b2f9902-fd7b-4a98-87a3-f36c74b0af32",
      "typeVersion": 1.1
    }
  ],
  "pinData": {
    "Executed by other flow": []
  },
  "connections": {
    "Executed by other flow": {
      "main": [
        [
          {
            "node": "AI Operation Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Operation Classifier": {
      "main": [
        [
          {
            "node": "Parse Operation Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Operation Decision": {
      "main": [
        [
          {
            "node": "Domain Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Email with AI": {
      "main": [
        [
          {
            "node": "Parse AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Response": {
      "main": [
        [
          {
            "node": "Prepare Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Emails": {
      "main": [
        [
          {
            "node": "Check if Emails Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Emails Exist": {
      "main": [
        [
          {
            "node": "Pause Deletion (5s)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Emails Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Email": {
      "main": [
        [
          {
            "node": "Aggregate Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Emails Found": {
      "main": [
        [
          {
            "node": "Send No Emails Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Email with AI",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Operation Classifier",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Process Email with AI (Reply)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Spam Parameters": {
      "main": [
        [
          {
            "node": "Fetch Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Draft Parameters": {
      "main": [
        [
          {
            "node": "Fetch Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trash Parameters": {
      "main": [
        [
          {
            "node": "Fetch Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email": {
      "main": [
        [
          {
            "node": "Save as Gmail Draft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pause Deletion (5s)": {
      "main": [
        [
          {
            "node": "Delete Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Domain Decision": {
      "main": [
        [
          {
            "node": "Generate Email with AI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Draft Parameters",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Spam Parameters",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Trash Parameters",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter Out Own Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Emails": {
      "main": [
        [
          {
            "node": "Send Clean Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check New Email (IMAP)": {
      "main": [
        [
          {
            "node": "Filter Out Own Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Out Own Emails": {
      "main": [
        [
          {
            "node": "Process Email with AI (Reply)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Email with AI (Reply)": {
      "main": [
        [
          {
            "node": "Prepare Email Reply Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email Reply Content": {
      "main": [
        [
          {
            "node": "Pause",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pause": {
      "main": [
        [
          {
            "node": "Save as Gmail Draft1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dcba3f23-0a16-41cb-a8a7-123dd4b30517",
  "meta": {
    "instanceId": "3fdd671e7fc1859ff2383b05c6eea518207a3d971ca0642cd42531697f273a8c"
  },
  "id": "luB6neTADgM0YTIH",
  "tags": [
    {
      "createdAt": "2025-09-08T07:55:19.208Z",
      "updatedAt": "2025-09-08T07:55:19.208Z",
      "id": "8mzLwVwaYcqGeRXd",
      "name": "email"
    },
    {
      "createdAt": "2025-08-04T04:19:34.812Z",
      "updatedAt": "2025-08-04T04:19:34.812Z",
      "id": "i9zHVsEzM4VbgpCT",
      "name": "automation"
    },
    {
      "createdAt": "2025-09-25T04:42:40.454Z",
      "updatedAt": "2025-09-25T04:42:40.454Z",
      "id": "udnrQ7ZKmGDNQZo2",
      "name": "unified"
    }
  ]
}