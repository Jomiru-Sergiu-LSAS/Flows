{
  "name": "rw-tool",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -160,
        -16
      ],
      "id": "88bd0a11-2898-4a16-a1e2-5b1fb3735218",
      "name": "Executed by other flow"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput + ' ' + ($json.emailInstructions || $json.query) }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You are an AI operation classifier for file operations. Analyze the user's request and determine which file operation they want to perform.  | Available operations: 1. **FILE_READ** - The user wants to read, view, display, open, or show the contents of a file. 2. **FILE_WRITE** - The user wants to write, create, save, edit, or modify file content. 3. **FILE_DELETE** - The user wants to delete, remove, or erase a file.  Analyze the user request: '{{ $json.chatInput || $json.query }}' File instructions: '{{ $json.fileInstructions || 'None provided' }}'  For FILE_READ and FILE_DELETE: Extract the file path and put it in 'input'. For FILE_WRITE: Extract the content to write and put it in 'input', extract the file path and put it in 'file'.  Examples: - 'read C:\\\\file.txt' → {\"operation\": \"FILE_READ\", \"input\": \"C:\\\\file.txt\"} - 'delete temp.log' → {\"operation\": \"FILE_DELETE\", \"input\": \"temp.log\"} - 'write \"hello\" to output.txt' → {\"operation\": \"FILE_WRITE\", \"input\": \"hello\", \"file\": \"output.txt\"} - 'save \"test data\" to C:\\\\file.txt' → {\"operation\": \"FILE_WRITE\", \"input\": \"test data\", \"file\": \"C:\\\\file.txt\"}  Respond ONLY in JSON format: - For READ/DELETE: {\"operation\": \"<operation>\", \"input\": \"<file_path>\"} - For WRITE: {\"operation\": \"FILE_WRITE\", \"input\": \"<content_to_write>\", \"file\": \"<file_path>\"}  If unclear, default to FILE_READ."
            }
          ]
        }
      },
      "id": "9080608a-8c06-4900-b9b5-c9f64d004e50",
      "name": "AI Operation Classifier",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        64,
        -16
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "jsCode": "// Get the original input from the workflow trigger\nconst originalInput = $('Executed by other flow').first().json;\n\nreturn items.map(item => {\n  let parsed;\n  try {\n    parsed = JSON.parse(item.json.text);\n    // Return only the clean parsed data without the raw text field\n    return { \n      json: {\n        operation: parsed.operation,\n        input: parsed.input,\n        originalFileInstructions: originalInput.fileInstructions,\n        file: parsed.file || originalInput.file || parsed.input, // For write: use AI's file field, fallback to input for read/delete\n        data: originalInput.data || originalInput.text,\n        text: originalInput.text // For write operations\n      }\n    };\n  } catch (e) {\n    // Default to FILE_READ if parsing fails\n    return { \n      json: {\n        operation: \"FILE_READ\",\n        input: originalInput.file || originalInput.query || \"unknown\",\n        originalFileInstructions: originalInput.fileInstructions,\n        file: originalInput.file,\n        data: originalInput.data || originalInput.text,\n        text: originalInput.text\n      }\n    };\n  }\n});"
      },
      "id": "42b47ea4-af27-48d5-bf03-0cc80780e73d",
      "name": "Parse Operation Decision",
      "type": "n8n-nodes-base.code",
      "position": [
        432,
        -16
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "FILE_READ",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "read-operation"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "write-operation",
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "FILE_WRITE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "delete-operation",
                    "leftValue": "={{ $json.operation }}",
                    "rightValue": "FILE_DELETE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        656,
        -32
      ],
      "id": "d2bc611e-7761-4ed6-9583-ba68cef6a362",
      "name": "File Operations Router"
    },
    {
      "parameters": {
        "command": "=type \"{{ $json.file || $json.input }}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        880,
        -176
      ],
      "id": "e3f1c762-4a74-41f5-9c2c-79be098c0de9",
      "name": "Read File"
    },
    {
      "parameters": {
        "command": "=echo {{ $json.input }} > \"{{ $json.file }}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        880,
        -16
      ],
      "id": "b8d38d6b-7c23-44d0-98f2-05d9b5f9580f",
      "name": "Write File"
    },
    {
      "parameters": {
        "command": "=del \"{{ $json.file || $json.input }}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        880,
        144
      ],
      "id": "408b6676-2d8e-413b-a10d-de1bbeed8977",
      "name": "Delete File"
    },
    {
      "parameters": {
        "jsCode": "// Universal format output that works for all file operations\nconst item = $input.first();\nconst json = item.json;\n\n// Determine operation type and format accordingly\nlet result = '';\nlet status = 'success';\nlet errorInfo = null;\n\n// Check if there's an error in stderr\nif (json.stderr && json.stderr.trim()) {\n  status = 'error';\n  errorInfo = json.stderr;\n  result = `Error: ${json.stderr}`;\n} else {\n  // Success case - format based on operation\n  switch(json.operation) {\n    case 'FILE_READ':\n      result = json.stdout || 'File read successfully';\n      break;\n    case 'FILE_WRITE':\n      result = json.stdout || 'File written successfully';\n      break;\n    case 'FILE_DELETE':\n      result = json.stdout || 'File deleted successfully';\n      break;\n    default:\n      result = json.stdout || 'Operation completed successfully';\n  }\n}\n\n// Return formatted output\nreturn [{\n  json: {\n    operation: json.operation || 'UNKNOWN',\n    file: json.input || json.file || 'Unknown file',\n    result: result,\n    status: status,\n    completedAt: new Date().toISOString().replace('T', ' ').substring(0, 19),\n    originalRequest: json.originalChatInput || json.chatInput || json.query,\n    ...(errorInfo && { error: errorInfo }),\n    exitCode: json.exitCode || 0\n  }\n}];"
      },
      "id": "b2bf9ff3-3e59-4c83-b71c-118d1b82eb14",
      "name": "Format Output",
      "type": "n8n-nodes-base.code",
      "position": [
        1120,
        -16
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        64,
        128
      ],
      "id": "69160f0d-6a7d-4b18-9625-97ac9155b778",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "wwvhoLcIlADIQmDC",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "Parses the AI response and merges with the original input data including file paths and content",
        "height": 112,
        "width": 184,
        "color": 6
      },
      "id": "b1204046-b118-472f-9f7a-193537902fcc",
      "name": "Parse Decision Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        400,
        -144
      ]
    },
    {
      "parameters": {
        "content": "Routes to appropriate file operations based on the AI classification decision making",
        "height": 96,
        "width": 184,
        "color": 4
      },
      "id": "64c8a551-a3cb-44f4-81f5-f5075a90380e",
      "name": "Router Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        608,
        -144
      ]
    },
    {
      "parameters": {
        "content": "Executes Windows 'type' command in order to read, write, or delete files",
        "height": 96,
        "width": 168,
        "color": 2
      },
      "id": "d4ecea21-7c6f-4710-bdb1-71fd8be0eef2",
      "name": "Read Operation Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        848,
        -288
      ]
    },
    {
      "parameters": {
        "content": "Formats operation results with metadata including the timestamp or the status information",
        "height": 112,
        "width": 168
      },
      "id": "36b3e5a3-6e13-44a3-8302-cdb76ba5d42d",
      "name": "Output Format Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1088,
        -144
      ]
    },
    {
      "parameters": {
        "content": "RW Module test queries:\n\n\"query\": \"read \\\"C:\\\\Users\\\\Jomiru Sergiu\\\\Downloads\\\\file-tool.json\\\"\"\n\"query\": \"write \\\"test\\\" to \\\"C:\\\\Users\\\\Jomiru Sergiu\\\\Downloads\\\\file-tool.json\\\"\"\n\"query\": \"delete \\\"C:\\\\Users\\\\Jomiru Sergiu\\\\Downloads\\\\file-tool.json\\\"\"\n\n\nCall this tool to handle all read, write, delete file operations.\n\n\nDo not reason or give any feedback, just trigger the tools depending on the instructions below.\nTrigger \"RW Actions\" tool → For operations like file read, content read, write content, write to file, delete file, etc.\n{{ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "height": 288,
        "width": 536,
        "color": 5
      },
      "id": "ec2a5619-afac-487f-b76f-af86c4a4c884",
      "name": "AI Classifier Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        -320
      ]
    },
    {
      "parameters": {
        "events": [
          "init",
          "activate"
        ]
      },
      "type": "n8n-nodes-base.n8nTrigger",
      "typeVersion": 1,
      "position": [
        -160,
        128
      ],
      "id": "4580e4e2-6dda-45ff-be94-face92565b84",
      "name": "n8n Startup Trigger"
    }
  ],
  "pinData": {
    "Executed by other flow": [],
    "n8n Startup Trigger": [
      {
        "json": {
          "query": "read \"C:\\Dev\\LSAS Tec Dropbox\\Jomiru Sergiu\\Work\\Key\\AgentWorklfows\\workflows\\router.json"
        }
      }
    ]
  },
  "connections": {
    "Executed by other flow": {
      "main": [
        [
          {
            "node": "AI Operation Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Operation Classifier": {
      "main": [
        [
          {
            "node": "Parse Operation Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Operation Decision": {
      "main": [
        [
          {
            "node": "File Operations Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Operations Router": {
      "main": [
        [
          {
            "node": "Read File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Write File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read File": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write File": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete File": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Operation Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "n8n Startup Trigger": {
      "main": [
        [
          {
            "node": "AI Operation Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ef0f842f-7353-486e-9820-8fe31e21ce9b",
  "meta": {
    "instanceId": "3fdd671e7fc1859ff2383b05c6eea518207a3d971ca0642cd42531697f273a8c"
  },
  "id": "vvKOjDSXDqyYbpok",
  "tags": [
    {
      "createdAt": "2025-09-29T03:44:11.788Z",
      "updatedAt": "2025-09-29T03:44:11.788Z",
      "id": "E9p4H6NTDopVmJKt",
      "name": "file-operations"
    },
    {
      "createdAt": "2025-09-29T03:44:11.792Z",
      "updatedAt": "2025-09-29T03:44:11.792Z",
      "id": "hADwGEI1MIRaCf1N",
      "name": "unified-tool"
    },
    {
      "createdAt": "2025-08-04T04:19:34.812Z",
      "updatedAt": "2025-08-04T04:19:34.812Z",
      "id": "i9zHVsEzM4VbgpCT",
      "name": "automation"
    }
  ]
}